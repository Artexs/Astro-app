name: Deploy and Release

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}
            PUBLIC_SUPABASE_KEY=${{ secrets.PUBLIC_SUPABASE_KEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Deploy to Server
        env:
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          CONTAINER_NAME: astro-app-container
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.SSH_USERNAME }}@${{ secrets.TS_SERVER_IP }} << 'EOF'
            set -e

            echo "Logging in to GitHub Container Registry..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Pulling latest image: ${{ env.IMAGE_TAG }}"
            docker pull ${{ env.IMAGE_TAG }}

            echo "Stopping existing container if running..."
            if [ "$(docker ps -q -f name=${{ env.CONTAINER_NAME }})" ]; then
              docker stop ${{ env.CONTAINER_NAME }}
            fi

            echo "Removing existing container if exists..."
            if [ "$(docker ps -aq -f name=${{ env.CONTAINER_NAME }})" ]; then
              docker rm ${{ env.CONTAINER_NAME }}
            fi

            echo "Starting new container..."
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p 3000:3000 \
              --network host \
              --restart unless-stopped \
              -e PUBLIC_SUPABASE_URL="${{ secrets.PUBLIC_SUPABASE_URL }}" \
              -e PUBLIC_SUPABASE_KEY="${{ secrets.PUBLIC_SUPABASE_KEY }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              ${{ env.IMAGE_TAG }}

            echo "Cleaning up old images..."
            docker image prune -af --filter "label=org.opencontainers.image.source=https://github.com/${{ github.repository }}" || true

            echo "Deployment completed successfully at $(date)"
            docker ps -f name=${{ env.CONTAINER_NAME }}
          EOF
